#!/usr/bin/env python3
"""
Script de validaci√≥n para verificar la integraci√≥n entre DocumentVectorManager y HybridRetrievalSystem.
CRITICAL TEST: Verificar que los documentos se guarden y encuentren correctamente.
"""

import asyncio
import logging
from storage.vector_manager import VectorManager
from memory.hybrid_retrieval import HybridRetrievalSystem

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

async def test_integration():
    """Test de integraci√≥n cr√≠tico"""
    logger.info("üîç INICIANDO TEST DE INTEGRACI√ìN CR√çTICO")
    
    try:
        # 1. Inicializar componentes
        logger.info("1Ô∏è‚É£ Inicializando VectorManager...")
        vector_manager = VectorManager()
        
        logger.info("2Ô∏è‚É£ Inicializando HybridRetrievalSystem...")
        hybrid_system = HybridRetrievalSystem(vector_manager)
        
        # 2. Verificar colecciones disponibles
        logger.info("3Ô∏è‚É£ Verificando colecciones disponibles...")
        stats = vector_manager.get_collection_stats()
        logger.info(f"üìä Estad√≠sticas ChromaDB: {stats}")
        
        # 3. Test: Agregar documentos de prueba
        logger.info("4Ô∏è‚É£ Agregando documentos de prueba...")
        test_documents = [
            "Marco Aurelio escribi√≥ las Meditaciones como reflexiones personales sobre filosof√≠a estoica.",
            "Las Meditaciones contienen pensamientos sobre la virtud, la muerte y el deber.",
            "El emperador romano Marco Aurelio fue tambi√©n un fil√≥sofo estoico."
        ]
        
        test_metadatas = [
            {"file_name": "test_marco_aurelio.pdf", "file_type": "pdf", "chunk_id": "1"},
            {"file_name": "test_marco_aurelio.pdf", "file_type": "pdf", "chunk_id": "2"}, 
            {"file_name": "test_marco_aurelio.pdf", "file_type": "pdf", "chunk_id": "3"}
        ]
        
        test_ids = ["test_doc_1", "test_doc_2", "test_doc_3"]
        
        result = await vector_manager.add_documents(
            collection_name="documents",
            documents=test_documents,
            metadatas=test_metadatas,
            ids=test_ids
        )
        
        if result:
            logger.info(f"‚úÖ Documentos de prueba agregados exitosamente: {result}")
        else:
            logger.error("‚ùå FALLO: No se pudieron agregar documentos de prueba")
            return False
        
        # 4. Test: B√∫squeda con HybridRetrievalSystem
        logger.info("5Ô∏è‚É£ Probando b√∫squeda con HybridRetrievalSystem...")
        
        test_queries = [
            "Marco Aurelio filosof√≠a estoica",
            "Meditaciones emperador romano",
            "reflexiones sobre la muerte"
        ]
        
        for query in test_queries:
            logger.info(f"üîç Probando query: '{query}'")
            context = await hybrid_system.search(query)
            
            if "Marco Aurelio" in context or "Meditaciones" in context:
                logger.info(f"‚úÖ Query exitosa: encontr√≥ contenido relevante")
                logger.info(f"üìÑ Contexto (preview): {context[:200]}...")
            else:
                logger.error(f"‚ùå FALLO: Query no encontr√≥ contenido relevante")
                logger.error(f"üìÑ Contexto recibido: {context}")
                return False
        
        # 5. Test: Verificar scores de similitud positivos
        logger.info("6Ô∏è‚É£ Verificando scores de similitud...")
        search_results = await vector_manager.search("documents", "Marco Aurelio", n_results=3)
        
        for result in search_results:
            similarity = result.get('similarity', 0)
            distance = result.get('distance', 999)
            logger.info(f"üìä Resultado: similarity={similarity:.3f}, distance={distance:.3f}")
            
            if similarity < 0:
                logger.error(f"‚ùå FALLO: Similarity negativa detectada: {similarity}")
                return False
            
            if similarity > 1:
                logger.warning(f"‚ö†Ô∏è Similarity mayor que 1: {similarity}")
        
        logger.info("üéâ TODOS LOS TESTS PASARON EXITOSAMENTE")
        logger.info("‚úÖ La integraci√≥n DocumentVectorManager <-> HybridRetrievalSystem funciona correctamente")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå ERROR EN TEST DE INTEGRACI√ìN: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_integration())